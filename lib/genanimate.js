// Generated by CoffeeScript 1.6.3
(function() {
  var ANIMATE_HTML_ACTION_SUFFIX, ANIMATE_HTML_SUFFIX, copyToGenFromRoot, executeTask, fs, loadAndExec, mkdirp, path, phantom, scrapeAnimate;

  phantom = require('phantom');

  path = require('path');

  fs = require('fs.extra');

  mkdirp = require('mkdirp');

  ANIMATE_HTML_SUFFIX = '.html';

  ANIMATE_HTML_ACTION_SUFFIX = '_edgeActions.html';

  /* Example
  genanimate = require 'genanimate'
  genanimate.genanimate
    animate_dir: 'assets/animate'
    src: ['test']
    html_gen_path: 'gen'
    images_gen_path: 'gen/images'
  executeTask config
  */


  loadAndExec = function(url, execCode, callback) {
    if (callback == null) {
      callback = function() {};
    }
    return phantom.create(function(ph) {
      return ph.createPage(function(page) {
        return page.open(url, function(status) {
          return setTimeout((function() {
            return page.evaluate(execCode, function(result) {
              return callback(ph, result);
            });
          }), 100);
        });
      });
    });
  };

  copyToGenFromRoot = function(config, callback) {
    var from, to,
      _this = this;
    if (callback == null) {
      callback = function() {};
    }
    from = path.join(path.resolve(config.animate_dir), 'images');
    to = path.join(path.resolve('.'), config.images_gen_path);
    return mkdirp(to, function(e) {
      if (e) {
        console.error(err);
      }
      return fs.copyRecursive(from, to, callback);
    });
  };

  scrapeAnimate = function(config, target, callback) {
    var animate_target;
    if (callback == null) {
      callback = function() {};
    }
    animate_target = path.existsSync(path.join(path.resolve(config.animate_dir), target + ANIMATE_HTML_SUFFIX)) ? path.join(path.resolve(config.animate_dir), target + ANIMATE_HTML_SUFFIX) : path.join(path.resolve(config.animate_dir), target + ANIMATE_HTML_ACTION_SUFFIX);
    return loadAndExec('file://' + animate_target, (function() {
      return $('#Stage').html();
    }), function(ph, result) {
      var to;
      ph.exit();
      to = path.join(path.resolve(config.html_gen_path), target + '.html');
      fs.writeFileSync(to, result);
      console.log('file generate:', to, result.slice(0, 11));
      return callback(result);
    });
  };

  executeTask = function(config, callback) {
    if (callback == null) {
      callback = function() {};
    }
    return copyToGenFromRoot(config, function() {
      var _ref;
      config.src = ((_ref = config.src) != null ? _ref.length : void 0) ? config.src : [config.src];
      return config.src.forEach(function(s) {
        return scrapeAnimate(config, s, function(result) {
          return typeof callback === "function" ? callback() : void 0;
        });
      });
    });
  };

  exports.genanimate;

  module.exports = {
    genanimate: executeTask
  };

}).call(this);
